# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (leave empty to use current pyproject.toml version)"
        required: false
        type: string
      environment:
        description: "Target environment"
        required: true
        default: "pypi"
        type: choice
        options:
          - pypi
          - testpypi
      force_publish:
        description: "Force publish even if version already exists"
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Display trigger information
        run: |
          echo "Triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual dispatch with inputs:"
            echo "  Version: ${{ github.event.inputs.version || 'Using pyproject.toml version' }}"
            echo "  Environment: ${{ github.event.inputs.environment }}"
            echo "  Force publish: ${{ github.event.inputs.force_publish }}"
          else
            echo "Release: ${{ github.event.release.tag_name }}"
          fi

      - name: Update version if specified
        if: github.event.inputs.version != ''
        run: |
          echo "Updating version to: ${{ github.event.inputs.version }}"
          python -c "
          import re
          with open('pyproject.toml', 'r') as f:
              content = f.read()
          content = re.sub(r'version = \"[^\"]*\"', 'version = \"${{ github.event.inputs.version }}\"', content)
          with open('pyproject.toml', 'w') as f:
              f.write(content)
          "

      - name: Display current version
        run: |
          python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(f'Building version: {data[\"tool\"][\"poetry\"][\"version\"]}')
          "

      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: ${{ github.event.inputs.environment || 'pypi' }}
      # Dynamic URL based on environment and project name
      url: ${{ github.event.inputs.environment == 'testpypi' && 'https://test.pypi.org/project/dinoscan/' || 'https://pypi.org/project/dinoscan/' }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Display publishing information
        run: |
          echo "Publishing to: ${{ github.event.inputs.environment || 'pypi' }}"
          echo "Force publish: ${{ github.event.inputs.force_publish || 'false' }}"
          echo "Files to publish:"
          ls -la dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          repository-url: ${{ github.event.inputs.environment == 'testpypi' && 'https://test.pypi.org/legacy/' || '' }}
          skip-existing: ${{ github.event.inputs.force_publish != 'true' }}
