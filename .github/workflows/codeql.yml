# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "31 12 * * 5"
  workflow_dispatch: # Allow manual triggering

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          - language: javascript-typescript
            build-mode: none
          - language: python
            build-mode: none
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetches the full history for better analysis
          fetch-depth: 0

      # Setup Python for Python analysis optimization
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      # Setup Node.js for JavaScript/TypeScript analysis optimization
      - name: Setup Node.js
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Install Python dependencies for better analysis
      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f pyproject.toml ]; then
            pip install -e .
          fi

      # Install Node.js dependencies for better analysis
      - name: Install Node.js dependencies
        if: matrix.language == 'javascript-typescript' && hashFiles('**/package.json') != ''
        run: |
          # Install root dependencies if package.json exists
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
          fi
          
          # Install vscode-extension dependencies if they exist
          if [ -f vscode-extension/package.json ]; then
            cd vscode-extension
            if [ -f package-lock.json ]; then
              npm ci
            elif [ -f yarn.lock ]; then
              npm install -g yarn && yarn install --frozen-lockfile
            else
              npm install
            fi
            cd ..
          fi

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          # Enhanced security queries for comprehensive analysis
          queries: security-extended,security-and-quality
          # Custom configuration for better analysis
          config: |
            name: "DinoScan CodeQL Config"

            # Exclude test files and generated code from some checks
            paths-ignore:
              - "test/**"
              - "tests/**"
              - "**/test_*.py"
              - "**/*_test.py"
              - "**/node_modules/**"
              - "**/__pycache__/**"
              - "**/build/**"
              - "**/dist/**"

            # Include additional query packs
            packs:
              - codeql/python-queries
              - codeql/javascript-queries
              - codeql/security-queries

      # If the analyze step fails for one of the languages you are analyzing with
      # "We were unable to automatically build your code", modify the matrix above
      # to set the build mode to "manual" for that language. Then modify this step
      # to build your code.
      # Command-line programs to run using the OS shell.
      # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'If you are using a "manual" build mode for one or more of the' \
            'languages you are analyzing, replace this with the commands to build' \
            'your code, for example:'
          echo '  make bootstrap'
          echo '  make release'
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          output: sarif-results
          upload: true

      # Upload SARIF results as artifacts for later review
      - name: Upload SARIF results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codeql-results-${{ matrix.language }}
          path: sarif-results
          retention-days: 30

  # Additional job for dependency review
  dependency-review:
    name: Dependency Review
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          # Fail on high or critical vulnerabilities
          fail-on-severity: high
          # Allow only specific licenses
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
          # Deny specific licenses
          deny-licenses: GPL-2.0, GPL-3.0

  # Security summary job
  security-summary:
    name: Security Summary
    if: always()
    needs: [analyze, dependency-review]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: read
    steps:
      - name: Security Analysis Summary
        run: |
          echo "## Security Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "✅ CodeQL analysis completed for all languages" >> $GITHUB_STEP_SUMMARY
          echo "✅ Dependency review completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Analysis Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- **Python**: Security and quality checks" >> $GITHUB_STEP_SUMMARY
          echo "- **JavaScript/TypeScript**: Security and quality checks" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Actions**: Workflow security checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in the Security tab of this repository." >> $GITHUB_STEP_SUMMARY
